# SPDX-FileCopyrightText: Â© Vegard IT GmbH (https://vegardit.com) and contributors
# SPDX-FileContributor: Sebastian Thomschke, Vegard IT GmbH
# SPDX-License-Identifier: Apache-2.0
#
# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
name: Setup Haxe Targets
description: Installs and configures Haxe compiler targets
inputs:
  setup-cs:     { default: "false", description: "true or false or Mono version" }
  setup-flash:  { default: "false", description: "true or false or Flash version" }
  setup-hl:     { default: "false", description: "true or false" }
  setup-java:   { default: "false", description: "true or false or Java version" }
  setup-lua:    { default: "false", description: "true or false or Lua version" }
  setup-node:   { default: "false", description: "true or false or Node.js version" }
  setup-php:    { default: "false", description: "true or false or PHP version" }
  setup-python: { default: "false", description: "true or false or Python version" }

  # internal:
  haxe-reusable-workflows-repo:    { default: "vegardit/haxe-reusable-workflows", description: "Repository containing the setup-haxe-targets action" }
  haxe-reusable-workflows-version: { default: "v1", description: "Version of the setup-haxe-targets action" }

outputs:
  flash-cmd:
    description: "Command to run the flashdebugger"
    value: ${{ steps.SETUP-FLASH.outputs.flash-cmd }}
  flash-log:
    description: "Path to the flash debugger log file"
    value: ${{ steps.SETUP-FLASH.outputs.flash-log }}

runs:
  using: "composite"
  steps:
    - name: Process input parameter
      shell: bash
      run: |
        # Convert inputs that might be passed as boolean or string to strings so we can safely do
        # {{ env.SETUP_CS == 'true' }} instead of {{ inputs.setup-cs == 'true' || inputs.setup-cs == true }}

        # Lua requires Python for installation
        setup_python="${{ inputs.setup-python }}"
        if [[ "${{ inputs.setup-lua }}" != "false" && $setup_python == "false" ]]; then
          setup_python="true"
        fi

        cat <<EOF >> $GITHUB_ENV
        SETUP_CS=${{     inputs.setup-cs }}
        SETUP_FLASH=${{  inputs.setup-flash }}
        SETUP_HL=${{     inputs.setup-hl }}
        SETUP_JAVA=${{   inputs.setup-java }}
        SETUP_LUA=${{    inputs.setup-lua }}
        SETUP_NODE=${{   inputs.setup-node }}
        SETUP_PHP=${{    inputs.setup-php }}
        SETUP_PYTHON=$setup_python
        EOF


    ##################################################
    # Prepare OS
    ##################################################
    # workaround to determine job_workflow_ref / job_workflow_sha to run the local actions from the same branch as this workflow
    # - https://stackoverflow.com/questions/71046096/reusable-workflows-with-local-actions
    # - https://github.com/community/community/discussions/31054
    - name: "Git checkout workflow repo"
      if: env.ACT != 'true' # https://github.com/nektos/act#skipping-steps
      uses: actions/checkout@v3
      with:
        path: ./.github/temp/haxe-reusable-workflows
        repository: ${{ inputs.haxe-reusable-workflows-repo }}
        ref: ${{ inputs.haxe-reusable-workflows-version }}
        token: ${{ github.token }}
    - name: "Git checkout workflow repo"
      if: env.ACT == 'true'
      shell: bash
      run: |
        set -euo pipefail
        if [[ -f ./.github/temp/haxe-reusable-workflows/.github/actions/setup-haxe-targets/action.yaml ]]; then
          echo "nothing to do"
        else
          rm -rf ./.github/temp/haxe-reusable-workflows
          mkdir -p ./.github/temp
          if [[ -f ./.github/actions/setup-haxe-targets/action.yml ]]; then
            (set -x; ln -s "$PWD" ./.github/temp/haxe-reusable-workflows)
          else
            # checkout "actions/checkout@v3" fails with "using ::error::Input required and not supplied: token", so we do it old school
            (set -x; git clone "https://github.com/${{ inputs.haxe-reusable-workflows-repo }}" \
               --depth 1 --single-branch \
               -b "${{ inputs.haxe-reusable-workflows-version }}" \
               ./.github/temp/haxe-reusable-workflows)
          fi
        fi

    - name: Prepare OS
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/prepare-os


    ##################################################
    # Setup targets
    ##################################################

    - name: Setup [hl]
      if: env.SETUP_HL != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-hashlink

    - name: Setup [flash]
      id: SETUP-FLASH
      if: env.SETUP_FLASH != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-flash
      with:
        flash-version: ${{ env.SETUP_FLASH == 'true' && '32' || env.SETUP_FLASH }}

    - name: Setup [java]
      if: env.SETUP_JAVA != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-java
      with:
        java-version: ${{ env.SETUP_JAVA == 'true' && '11' || env.SETUP_JAVA }}

    - name: Setup [node]
      if: env.SETUP_NODE != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-node
      with:
        node-version: ${{ env.SETUP_NODE == 'true' && 'lts/*' || env.SETUP_NODE }}

    - name: Setup [php]
      if: env.SETUP_PHP != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-php
      with:
        php-version: ${{ env.SETUP_PHP == 'true' && '7.4' || env.SETUP_PHP }}

    - name: Setup [python]
      if: env.SETUP_PYTHON != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-python
      with:
        python-version: ${{ env.SETUP_PYTHON == 'true' && '3.11' || env.SETUP_PYTHON }}

    - name: Setup [lua]
      if: env.SETUP_LUA != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-lua
      with:
        lua-version: ${{ env.SETUP_LUA == 'true' && '5.3.6' || env.SETUP_LUA }}

    - name: Setup [cs]
      if: env.SETUP_CS != 'false'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-cs
      with:
        mono-version: ${{ env.SETUP_CS == 'true' && '6.12.0.182' || env.SETUP_CS }}
