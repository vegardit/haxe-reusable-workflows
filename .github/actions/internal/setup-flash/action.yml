# SPDX-FileCopyrightText: Â© Vegard IT GmbH (https://vegardit.com) and contributors
# SPDX-FileContributor: Sebastian Thomschke, Vegard IT GmbH
# SPDX-License-Identifier: Apache-2.0
#
# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
name: Setup Haxe Flash Target
description: Installs and configures the Haxe compiler target Flash

inputs:
  cache-folder:
    default: "${{ runner.temp}}/haxe/targets/flash"
    description: Path to store downloaded files
  flash-version:
    default: "32"
    description: "Version of Flash to install"

outputs:
  flash-cmd:
    description: "Command to run the flashdebugger"
    value: ${{ steps.INSTALL-FLASH.outputs.flash-cmd }}
  flash-log:
    description: "Path to the flash debugger log file"
    value: ${{ steps.INSTALL-FLASH.outputs.flash-log }}

runs:
  using: "composite"
  steps:
    - name: "Setup Flash: Cache"
      if: ${{ runner.os == 'Windows' && !env.ACT }} # https://github.com/nektos/act#skipping-steps
      uses: actions/cache@v3 # https://github.com/actions/cache
      with:
        path: ${{ inputs.cache-folder }}
        key: ${{ runner.os }}-flash-${{ inputs.flash-version }}

    - name: "Setup Flash: Install Binaries"
      id: INSTALL-FLASH
      shell: bash
      env:
        CACHE_FOLDER: ${{ inputs.cache-folder }}
        FLASH_VERSION: ${{ inputs.flash-version }}
      run: |
        echo "::group::Setup Flash: Install Binaries"
        set -euox pipefail

        case "${{ runner.os }}" in
          Linux)
            sudo apt-get install -y --no-install-recommends \
              libcurl3-gnutls \
              libglib2.0-0 \
              libgtk2.0-0 \
              libnss3 \
              libx11-6 \
              libxcursor1 \
              libxext6 \
              libxt6 \
              xvfb

            flash_lso_dir="$HOME/.macromedia/Flash_Player"
            echo "AUDIODEV=null" >> $GITHUB_ENV

            mkdir -p "$CACHE_FOLDER"
            pushd "$CACHE_FOLDER"
              if [[ ! -f flash_player_sa_linux_debug.x86_64.tar.gz ]]; then
                curl -sSfL "https://fpdownload.macromedia.com/pub/flashplayer/updaters/$FLASH_VERSION/flash_player_sa_linux_debug.x86_64.tar.gz" -o flashplayer.tar.gz
                # alternative:
                # - https://archive.org/download/flash32-5y5r/Flash/Lin/flash_player_sa_linux_debug.x86_64.tar.gz
              fi

              tar -C "$HOME" --wildcards flashplayerdebugger -xzf flashplayer.tar.gz
            popd

              cat <<EOF > "$HOME/flashplayer.sh"
        #!/bin/bash
        set -eux
        xvfb-run -e /dev/null \
          -a --server-args="-ac -screen 0 1024x768x24 +extension RANDR" \
          "$HOME/flashplayerdebugger" "\$@"
        EOF
            chmod 755 "$HOME/flashplayer.sh"
            echo "flash-cmd=$HOME/flashplayer.sh" | tee -a "$GITHUB_OUTPUT"
            ;;
          macOS)
              flash_lso_dir="$HOME/Library/Preferences/Macromedia/Flash Player"

              # not sure if this is required:
              #brew install xquartz --cask
              #echo "/usr/X11/bin" >> $GITHUB_PATH
              #echo "DISPLAY=:99" >> $GITHUB_ENV
              #if ! pgrep Xvfb; then
              #  sudo Xvfb :99 -ac -screen 0 1280x1024x24 +extension RANDR &
              #fi

              mkdir -p "$CACHE_FOLDER"
              pushd "$CACHE_FOLDER"
                if [[ ! -f flashplayer.dmg ]]; then
                  curl -sSfL "https://fpdownload.macromedia.com/pub/flashplayer/updaters/$FLASH_VERSION/flashplayer_${FLASH_VERSION}_sa_debug.dmg" -o flashplayer.dmg
                  # alternative:
                  # - https://archive.org/download/flash32-5y5r/Flash/Mac/flashplayer_32_sa_debug.dmg
                  # - https://github.com/ntkernel/flash/releases/download/32.0.0.403/flashplayer_32_sa_debug.dmg
                fi

                # specifying custom mount point to workaround "VMware Shared Folders: Input/output error"
                mount_point=/tmp/flashplayer_image
                mkdir $mount_point
                hdiutil attach -readonly flashplayer.dmg -mountpoint $mount_point
                cp -rf "$mount_point/Flash Player.app" /Applications
                hdiutil detach $mount_point
              popd

              echo "flash-cmd=/Applications/Flash Player.app/Contents/MacOS/Flash Player Debugger" | tee -a "$GITHUB_OUTPUT"
            ;;
          Windows)
            flash_lso_dir="$(cygpath "$APPDATA")/Macromedia/Flash Player"

            mkdir -p "$(cygpath "$CACHE_FOLDER")"
            pushd "$(cygpath "$CACHE_FOLDER")"
              if [[ ! -f flashplayer_debugger.exe ]]; then
                curl -sSfL "https://fpdownload.macromedia.com/pub/flashplayer/updaters/$FLASH_VERSION/flashplayer_${FLASH_VERSION}_sa_debug.exe" -o flashplayer_debugger.exe
                # alternative:
                # - https://archive.org/download/flash32-5y5r/Flash/Win/flashplayer_32_sa_debug.exe
                # - https://github.com/ntkernel/flash/releases/download/32.0.0.403/flashplayer_32_sa_debug.exe
              fi

              cp flashplayer_debugger.exe "$HOME/flashplayer_debugger.exe"
            popd

            echo "flash-cmd=$HOME/flashplayer_debugger.exe" | tee -a "$GITHUB_OUTPUT"
            ;;
        esac

        mkdir -p "$flash_lso_dir"
        pushd "$flash_lso_dir"
          # Trust the current directory, to prevent "SecurityError: Error #2017: Only trusted local files may cause the Flash Player to exit."
          mkdir -p "#Security/FlashPlayerTrust"
          echo "${{ github.workspace }}" > "#Security/FlashPlayerTrust/github_actions.cfg"

          # Configure trace logging 
          # https://open-flash.github.io/documentation/mm-cfg/
          # https://jpauclair.net/mm-cfg-secrets/
          cat <<EOF > $HOME/mm.cfg
        AllowUserLocalTrust=1
        AutoUpdateDisable=0
        CrashLogEnable=1
        ErrorReportingEnable=1
        TraceOutputBuffered=0
        TraceOutputFileEnable=1
        EOF
          rm -rf "Logs"
          mkdir "Logs"
          touch "Logs/flashlog.txt" 
        popd

        echo "flash-log=$flash_lso_dir/Logs/flashlog.txt" | tee -a "$GITHUB_OUTPUT"

        echo "::endgroup::"
