# SPDX-FileCopyrightText: Â© Vegard IT GmbH (https://vegardit.com) and contributors
# SPDX-FileContributor: Sebastian Thomschke, Vegard IT GmbH
# SPDX-License-Identifier: Apache-2.0
#
# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
name: Test with Haxe
on:
  workflow_call:
    inputs:
      runner-os:    { required: true,        type: string, description: "e.g. ubuntu-latest, macos-latest, windows-latest" }
      haxe-version: { default: "latest",     type: string, description: "Haxe to test with (nightly, latest or a version number)" }
      haxe-libs:    { required: false,       type: string, description: "Haxe libs to install, separated by space or new-line, e.g. 'hscript format@1.0.0'" }
      haxe-args:    { default: "tests.hxml", type: string, description: "Haxe compiler arguments" }
      output-dir:   { default: "target",     type: string, description: "output folder for compilation artifacts"}
      work-dir:     { default: ".",          type: string, description: "Working directory, defaults to repo root" }

      test-cpp:    { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-cs:     { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-eval:   { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-flash:  { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-hl:     { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-java:   { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-jvm:    { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-lua:    { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-neko:   { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-node:   { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-php:    { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }
      test-python: { default: "false", type: string, description: "To enable specify 'true', Haxe compiler arguments, or a YAML config" }

      allow-failure:        { default: false, type: boolean, description: "true or false. Controls if test failures shall not fail the build" }
      retries:              { default:  0,    type: number,  description: "Number of test retries in case of failures" }
      test-timeout-minutes: { default: 10,    type: number,  description: "The maximum number of minutes a test can run before it is terminated" }

      job-timeout-minutes:  { default: 60, type: number, description: "The maximum number of minutes the build job shall run." }

      before-tests:       { required: false, type: string, description: "a bash script to be executed before the first test" }
      #before-tests-shell: { default: "bash", type: string, description: "shell to be used to esecute the before-tests script" }
      after-tests:        { required: false, type: string, description: "a bash script to be executed after the last test" }
      #after-tests-shell:  { default: "bash", type: string, description: "shell to be used to esecute the after-tests script" }

      debug-with-ssh:                    { default: "never", type: string,  description: "Start an SSH session for debugging purposes after tests ran: never, always, on_failure, on_failure_or_cancelled" }
      debug-with-ssh-only-for-actor:     { default: true,    type: boolean, description: "Limit access to the SSH session to the GitHub user that triggered the job" }
      debug-with-ssh-only-jobs-matching: { default: ".*",    type: string,  description: "Only start an SSH session for jobs matching this regex pattern" }

      # internal:
      haxe-reusable-workflows-repo:    { default: "vegardit/haxe-reusable-workflows", type: string, description: "Repository containing this workflow" }
      haxe-reusable-workflows-version: { default: "v1",                               type: string, description: "Version of this workflow" }

defaults:
  run:
    shell: bash

jobs:
  test-with-haxe:
    runs-on: ${{ inputs.runner-os }}
    timeout-minutes: ${{ inputs.job-timeout-minutes }}

    steps:
    - name: "Install: yq" # https://github.com/mikefarah/yq
      uses: vegardit/gha-setup-yq@v1

    - name: Process input parameter
      env:
        TEST_CPP:    ${{ inputs.test-cpp }}
        TEST_CS:     ${{ inputs.test-cs }}
        TEST_EVAL:   ${{ inputs.test-eval }}
        TEST_FLASH:  ${{ inputs.test-flash }}
        TEST_HL:     ${{ inputs.test-hl }}
        TEST_JAVA:   ${{ inputs.test-java }}
        TEST_JVM:    ${{ inputs.test-jvm }}
        TEST_LUA:    ${{ inputs.test-lua }}
        TEST_NEKO:   ${{ inputs.test-neko }}
        TEST_NODE:   ${{ inputs.test-node }}
        TEST_PHP:    ${{ inputs.test-php }}
        TEST_PYTHON: ${{ inputs.test-python }}
      run: |
        set -eu

        function read_var() {
          echo "${!1}"
        }

        if [[ ${ACT:-false} == "true" ]]; then
          # workaround for: Error in if-expression: "if: env.TEST_JVM == 'true' && env.TEST_JVM_VERSION != env.TEST_JAVA_VERSION" (TODO: evaluateCompare not implemented! left: invalid, right: invalid)
          # see also https://github.com/nektos/act/issues/1643
          echo "TEST_JAVA_VERSION=" > $GITHUB_ENV
        fi

        for target in CPP CS EVAL FLASH HL JAVA JVM LUA NEKO NODE PHP PYTHON; do
          target_args="${{ inputs.haxe-args }}"
          target_allow_failure="${{ inputs.allow-failure }}"
          target_retries="${{ inputs.retries }}"
          target_timeout="${{ inputs.test-timeout-minutes }}"

          target_config=$(read_var "TEST_$target")
          case "$target_config" in
            ^$) test_target="false" ;;
            false|true) test_target=$target_config ;;
            *:*) # fancy YAML parsing
               test_target=$(         yq '.enabled       != false' <<< "$target_config")
               target_allow_failure=$(yq ".allow-failure == true or $target_allow_failure" <<< "$target_config")
               target_args=$(         yq ".haxe-args       // \"$target_args\"   " <<< "$target_config")
               target_retries=$(      yq ".retries         // \"$target_retries\"" <<< "$target_config")
               target_timeout=$(      yq ".timeout-minutes // \"$target_timeout\"" <<< "$target_config")

               case "$target" in
                 LUA)      echo "TEST_${target}_VERSION=$(yq '.lua-version    // ""' <<< "$target_config")" | tee -a "$GITHUB_ENV" ;;
                 NODE)     echo "TEST_${target}_VERSION=$(yq '.node-version   // ""' <<< "$target_config")" | tee -a "$GITHUB_ENV" ;;
                 JAVA|JVM) echo "TEST_${target}_VERSION=$(yq '.java-version   // ""' <<< "$target_config")" | tee -a "$GITHUB_ENV" ;;
                 PYTHON)   echo "TEST_${target}_VERSION=$(yq '.python-version // ""' <<< "$target_config")" | tee -a "$GITHUB_ENV" ;; 
               esac
               ;;
            *) test_target="true"
               target_args=$target_config
               ;;
          esac

          echo "TEST_${target}=$test_target"                        | tee -a "$GITHUB_ENV"
          echo "TEST_${target}_ARGS=$target_args"                   | tee -a "$GITHUB_ENV"
          echo "TEST_${target}_ALLOW_FAILURE=$target_allow_failure" | tee -a "$GITHUB_ENV"
          echo "TEST_${target}_RETRIES=$target_retries"             | tee -a "$GITHUB_ENV"
          echo "TEST_${target}_TIMEOUT=$target_timeout"             | tee -a "$GITHUB_ENV"
        done

    - name: Show environment variables
      run: env | sort

    - name: Git Checkout
      uses: actions/checkout@v4 #https://github.com/actions/checkout


    ##################################################
    # Prepare OS
    ##################################################
    # workaround to determine job_workflow_ref / job_workflow_sha to run the local actions from the same branch as this workflow
    # - https://stackoverflow.com/questions/71046096/reusable-workflows-with-local-actions
    # - https://github.com/community/community/discussions/31054
    - name: "Git checkout workflow repo"
      if: env.ACT != 'true' # https://github.com/nektos/act#skipping-steps
      uses: actions/checkout@v4
      with:
        path: ./.github/temp/haxe-reusable-workflows
        repository: ${{ inputs.haxe-reusable-workflows-repo }}
        ref: ${{ inputs.haxe-reusable-workflows-version }}
        token: ${{ github.token }}
    - name: "Git checkout workflow repo"
      if: env.ACT == 'true'
      run: |
        set -euo pipefail
        if [[ -f ./.github/temp/haxe-reusable-workflows/.github/actions/setup-haxe-targets/action.yaml ]]; then
          echo "nothing to do"
        else
          rm -rf ./.github/temp/haxe-reusable-workflows
          mkdir -p ./.github/temp
          if [[ -f ./.github/actions/setup-haxe-targets/action.yml ]]; then
            (set -x; ln -s "$PWD" ./.github/temp/haxe-reusable-workflows)
          else
            # checkout "actions/checkout@v4" fails with "using ::error::Input required and not supplied: token", so we do it old school
            (set -x; git clone "https://github.com/${{ inputs.haxe-reusable-workflows-repo }}" \
               --depth 1 --single-branch \
               -b "${{ inputs.haxe-reusable-workflows-version }}" \
               ./.github/temp/haxe-reusable-workflows)
          fi
        fi

    - name: Prepare OS
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/prepare-os


    ##################################################
    # Install Haxe and Libraries
    ##################################################
    - name: "Install: Haxe ${{ inputs.haxe-version }}"
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/setup-haxe
      with:
        haxe-version: ${{ inputs.haxe-version }}
        haxe-libs:    ${{ inputs.haxe-libs }}
        haxe-reusable-workflows-repo: ${{ inputs.haxe-reusable-workflows-repo }}
        haxe-reusable-workflows-version: ${{ inputs.haxe-reusable-workflows-version }}


    ##################################################
    # Before Tests
    ##################################################

    - name: Create output dir '${{ inputs.output-dir }}'
      working-directory: ${{ inputs.work-dir }}
      run: mkdir -p "${{ inputs.output-dir }}"

    - name: "Before Tests: Custom Bash script"
      if: inputs.before-tests
      #shell: ${{ inputs.before-tests-shell }}
      env:
        GITHUB_JOB_ID: ${{ github.job }}
      working-directory: ${{ inputs.work-dir }}
      run: ${{ inputs.before-tests }}


    ##################################################
    # Test neko
    ##################################################
    - name: Test [neko]
      if: env.TEST_NEKO == 'true'
      continue-on-error: ${{ env.TEST_NEKO_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_NEKO_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run:  |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_NEKO_ARGS -neko ${{ inputs.output-dir }}/tests.n)

        max_attempts=$((1 + $TEST_NEKO_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; neko ${{ inputs.output-dir }}/tests.n) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test eval
    ##################################################
    - name: Test [eval]
      if: env.TEST_EVAL == 'true'
      continue-on-error: ${{ env.TEST_EVAL_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_EVAL_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*

        max_attempts=$((1 + $TEST_EVAL_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; haxe $TEST_EVAL_ARGS -D eval-stack --interp) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test Hashlink
    ##################################################
    - name: Setup [hl]
      if: env.TEST_HL == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-hashlink

    - name: Test [hl]
      if: env.TEST_HL == 'true'
      continue-on-error: ${{ env.TEST_HL_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_HL_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_HL_ARGS -hl ${{ inputs.output-dir }}/tests.hl)

        max_attempts=$((1 + $TEST_HL_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; hl ${{ inputs.output-dir }}/tests.hl) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test Flash
    ##################################################
    - name: Setup [flash]
      if: env.TEST_FLASH == 'true'
      id: SETUP_FLASH
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-flash

    - name: Test [flash]
      if: env.TEST_FLASH == 'true'
      continue-on-error: ${{ env.TEST_FLASH_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_FLASH_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_FLASH_ARGS -swf ${{ inputs.output-dir }}/tests.swf)

        # workaround for random "Application crashed with an unhandled SIGSEGV"
        max_attempts=$((1 + $TEST_FLASH_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          rm -f ${{ steps.SETUP_FLASH.outputs.flash-log }}
          tail --follow=name --retry "${{ steps.SETUP_FLASH.outputs.flash-log }}" 2>/dev/null &
          (set -x; "${{ steps.SETUP_FLASH.outputs.flash-cmd }}" "${{ inputs.output-dir }}/tests.swf") && exit_code=0 || exit_code=$?
          ps aux | grep "[t]ail --follow=name --retry" | awk '{print $2}' | xargs kill -9 2>/dev/null || true
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 2; fi
        done


    ##################################################
    # Test Java/JVM
    ##################################################
    - name: Setup [java]
      if: env.TEST_JAVA == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-java
      with:
        java-version: "${{ env.TEST_JAVA_VERSION || '11' }}"

    - name: Test [java]
      if: env.TEST_JAVA == 'true'
      continue-on-error: ${{ env.TEST_JAVA_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_JAVA_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_JAVA_ARGS -java ${{ inputs.output-dir }})

        max_attempts=$((1 + $TEST_JAVA_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; java -jar ${{ inputs.output-dir }}/*.jar) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done

    - name: Setup [java]
      if: env.TEST_JVM == 'true' && env.TEST_JVM_VERSION != env.TEST_JAVA_VERSION
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-java
      with:
        java-version: "${{ env.TEST_JVM_VERSION || '11' }}"

    - name: Test [jvm]
      if: env.TEST_JVM == 'true'
      continue-on-error: ${{ env.TEST_JVM_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_JVM_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*

        # Haxe 3.x or Haxe 4.0.x
        if [[ "${{ inputs.haxe-version }}" == 3.* || "${{ inputs.haxe-version }}" == 4.0.* ]]; then
          (set -x; haxe $TEST_JVM_ARGS -D jvm -java ${{ inputs.output-dir }})

          max_attempts=$((1 + $TEST_JVM_RETRIES))
          for i in $(seq 1 $max_attempts); do
            echo -e "$i. of $max_attempts attempt(s)...\n====================="
            (set -x; java -jar ${{ inputs.output-dir }}/*.jar) && exit_code=0 || exit_code=$?
            if [[ $exit_code -eq 0 ]]; then break;
            elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
            else sleep 5; fi
          done

        # Haxe 4.1+
        else
          (set -x; haxe $TEST_JVM_ARGS --jvm "${{ inputs.output-dir }}/tests.jar")

          max_attempts=$((1 + $TEST_JVM_RETRIES))
          for i in $(seq 1 $max_attempts); do
            echo -e "$i. of $max_attempts attempt(s)...\n====================="
            (set -x; java -jar "${{ inputs.output-dir }}/tests.jar") && exit_code=0 || exit_code=$?
            if [[ $exit_code -eq 0 ]]; then break;
            elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
            else sleep 5; fi
          done
        fi


    ##################################################
    # Test Node.js
    ##################################################
    - name: Setup [node]
      if: env.TEST_NODE == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-node
      with:
        node-version: "${{ env.TEST_NODE_VERSION || 'lts/*' }}"

    - name: Test [node]
      if: env.TEST_NODE == 'true'
      continue-on-error: ${{ env.TEST_NODE_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_NODE_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_NODE_ARGS -lib hxnodejs -D nodejs -js ${{ inputs.output-dir }}/tests.js)

        max_attempts=$((1 + $TEST_NODE_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; node ${{ inputs.output-dir }}/tests.js) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test PHP
    ##################################################
    - name: Setup [php]
      if: env.TEST_PHP == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-php
      with:
        php-version: ${{ startsWith(inputs.haxe-version, '3.') && '5.6' || '7.4' }}

    - name: Test [php]
      if: env.TEST_PHP == 'true'
      continue-on-error: ${{ env.TEST_PHP_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_PHP_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_PHP_ARGS -php ${{ inputs.output-dir }}/php)

        max_attempts=$((1 + $TEST_PHP_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; php ${{ inputs.output-dir }}/php/index.php) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test Python
    ##################################################
    - name: Setup [python]
      if: (env.TEST_PYTHON == 'true' || env.TEST_LUA == 'true') # Lua requires Python for installation
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-python
      with:
        python-version: "${{ env.TEST_PYTHON_VERSION || '3.11' }}"

    - name: Test [python]
      if: env.TEST_PYTHON == 'true'
      continue-on-error: ${{ env.TEST_PYTHON_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_PYTHON_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_PYTHON_ARGS -python ${{ inputs.output-dir }}/tests.py)

        max_attempts=$((1 + $TEST_PYTHON_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; python ${{ inputs.output-dir }}/tests.py) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test LUA
    ##################################################
    - name: Setup [lua]
      if: env.TEST_LUA == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-lua
      with:
        lua-version: "${{ env.TEST_LUA_VERSION || '5.3.6' }}"

    - name: Test [lua]
      if: env.TEST_LUA == 'true'
      continue-on-error: ${{ env.TEST_LUA_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_LUA_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_LUA_ARGS -lua ${{ inputs.output-dir }}/tests.lua)

        max_attempts=$((1 + $TEST_LUA_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; lua ${{ inputs.output-dir }}/tests.lua) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test C#
    ##################################################
    - name: Setup [cs]
      if: env.TEST_CS == 'true'
      uses: ./.github/temp/haxe-reusable-workflows/.github/actions/internal/setup-cs

    - name: Test [cs]
      if: env.TEST_CS == 'true'
      continue-on-error: ${{ env.TEST_CS_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_CS_TIMEOUT) }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_CS_ARGS -cs ${{ inputs.output-dir }}/cs)

        max_attempts=$((1 + $TEST_CS_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          (set -x; mono ${{ inputs.output-dir }}/cs/bin/*.exe) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # Test C++
    ##################################################
    - name: Test [cpp] # testing C++ as last since it takes the longest to build
      if: env.TEST_CPP == 'true'
      continue-on-error: ${{ env.TEST_CPP_ALLOW_FAILURE == 'true' }}
      timeout-minutes: ${{ fromJSON(env.TEST_CPP_TIMEOUT) }}
      working-directory: ${{ inputs.work-dir }}
      run: |
        set -eu
        rm -rf ${{ inputs.output-dir }}/*
        (set -x; haxe $TEST_CPP_ARGS -cpp ${{ inputs.output-dir }}/cpp)

        if [[ $OSTYPE == "darwin"* ]]; then
          executableFilterFlag="-perm +111"
        else
          executableFilterFlag="-executable"
        fi

        max_attempts=$((1 + $TEST_CPP_RETRIES))
        for i in $(seq 1 $max_attempts); do
          echo -e "$i. of $max_attempts attempt(s)...\n====================="
          executable=$(find ${{ inputs.output-dir }}/cpp -maxdepth 1 $executableFilterFlag -type f)
          (set -x; $executable) && exit_code=0 || exit_code=$?
          if [[ $exit_code -eq 0 ]]; then break;
          elif [[ $i -eq $max_attempts ]]; then exit $exit_code;
          else sleep 5; fi
        done


    ##################################################
    # After Tests
    ##################################################
    - name: "After Tests: Custom Bash script"
      if: always() && inputs.after-tests
      working-directory: ${{ inputs.work-dir }}
      #shell: ${{ inputs.after-tests-shell }}
      env:
        GITHUB_JOB_ID: ${{ github.job }}
        GITHUB_JOB_STATUS: ${{ job.status }}
      run: ${{ inputs.after-tests }}


    ##################################################
    # Setup SSH debug session
    ##################################################
    - name: "SSH session for debugging: check"
      id: DEBUG_SSH_SESSSION_CHECK
      if: always()
      run: |
        set -eu
        job_filter_pattern="${{ inputs.debug-with-ssh-only-jobs-matching }}"
        echo "job_filter: $job_filter_pattern"

        job_info=$(echo "$GITHUB_JOB ${{ runner.os }} haxe-${{ inputs.haxe-version }}" | tr -d '\n')
        echo "job_info: $job_info"

        if [[ "$job_info" =~ .*$job_filter_pattern.* ]] && case "${{ job.status }}" in
           success)   [[ "${{ inputs.debug-with-ssh }}" == always ]] ;;
           cancelled) [[ "${{ inputs.debug-with-ssh }}" == on_failure_or_cancelled ]] ;;
           failure)   [[ "${{ inputs.debug-with-ssh }}" =~ on_failure.* ]] ;;
        esac; then
           echo "start_session=true" | tee -a "$GITHUB_OUTPUT"
        fi

    - name: "SSH session for debugging: start"
      uses: mxschmitt/action-tmate@v3 # https://github.com/mxschmitt/action-tmate
      if: always() && steps.DEBUG_SSH_SESSSION_CHECK.outputs.start_session
      with:
        limit-access-to-actor: ${{ inputs.debug-with-ssh-only-for-actor }}
